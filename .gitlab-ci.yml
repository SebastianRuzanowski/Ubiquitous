image: mcr.microsoft.com/dotnet/core/sdk:3.1.300

stages:
  - test
  - quality
  - myget_common
  - myget_common_netcore
  - myget_eventbus
  - myget_eventbus_rabbitmq
  - myget_integrationeventlog
  - docker_deploy

test:
  before_script:
    - 'echo | dotnet --version'
    - dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
  stage: test
  variables:
    U_PRODUCT_SERVICE_IT_TEST_CONNECTION: $K8S_SECRET_U_PRODUCT_SERVICE_IT_TEST_CONNECTION
    U_PRODUCT_SERVICE_AT_TEST_CONNECTION: $K8S_SECRET_U_PRODUCT_SERVICE_AT_TEST_CONNECTION
  script:
    - dotnet test --logger "junit" --collect:"XPlat Code Coverage"
    - ls -ld ${CI_PROJECT_DIR}/*/*/*/*/TestResults/*
    - ./tools/reportgenerator "-reports:${CI_PROJECT_DIR}/*/*/*/*/TestResults/*/coverage.cobertura.xml" "-targetdir:Reports_Coverage" -reportTypes:TextSummary;
    - ./tools/reportgenerator "-reports:${CI_PROJECT_DIR}/*/*/*/*/TestResults/*/coverage.cobertura.xml" "-targetdir:Reports_Coverage" -reportTypes:Html;
    - ls Reports_Coverage
    - cat ./Reports_Coverage/Summary.txt
    - echo 'End Summary'
  coverage: /Line coverage[\s\S].+%/
  artifacts:
    paths:
      - Reports_Coverage/
    reports:
      junit:
        - '*/*/*/*/TestResults/TestResults.xml'

code_quality:
  stage: quality
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    SP_VERSION: 0.85.6
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - docker run
      --env SOURCE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      "registry.gitlab.com/gitlab-org/ci-cd/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json

MyGet_Common:
  stage: myget_common
  before_script:
    - 'cd src/BuildingBlocks/U.Common'
    - chmod -R a+x ./dotnet-restore.sh
    - chmod -R a+x ./dotnet-build.sh
    - chmod -R a+x ./dotnet-publish.sh
    - chmod -R a+x ./dotnet-nuget-push.sh
  script:
    - ./dotnet-restore.sh
    - ./dotnet-build.sh
    - ./dotnet-publish.sh
    - ./dotnet-nuget-push.sh
  only:
    - master
    - develop

MyGet_Common_NetCore:
  stage: myget_common_netcore
  before_script:
    - 'cd src/BuildingBlocks/U.Common.NetCore'
    - chmod -R a+x ./dotnet-restore.sh
    - chmod -R a+x ./dotnet-build.sh
    - chmod -R a+x ./dotnet-publish.sh
    - chmod -R a+x ./dotnet-nuget-push.sh
  script:
    - ./dotnet-restore.sh
    - ./dotnet-build.sh
    - ./dotnet-publish.sh
    - ./dotnet-nuget-push.sh
  only:
    - master
    - develop

MyGet_EventBus:
  stage: myget_eventbus
  before_script:
    - 'cd src/BuildingBlocks/U.EventBus'
    - chmod -R a+x ./dotnet-restore.sh
    - chmod -R a+x ./dotnet-build.sh
    - chmod -R a+x ./dotnet-publish.sh
    - chmod -R a+x ./dotnet-nuget-push.sh
  script:
    - ./dotnet-restore.sh
    - ./dotnet-build.sh
    - ./dotnet-publish.sh
    - ./dotnet-nuget-push.sh
  only:
    - master
    - develop

MyGet_EventBus_RabbitMQ:
  stage: myget_eventbus_rabbitmq
  before_script:
    - 'cd src/BuildingBlocks/U.EventBus.RabbitMQ'
    - chmod -R a+x ./dotnet-restore.sh
    - chmod -R a+x ./dotnet-build.sh
    - chmod -R a+x ./dotnet-publish.sh
    - chmod -R a+x ./dotnet-nuget-push.sh
  script:
    - ./dotnet-restore.sh
    - ./dotnet-build.sh
    - ./dotnet-publish.sh
    - ./dotnet-nuget-push.sh
  only:
    - master
    - develop

MyGet_IntegrationEventLog:
  stage: myget_integrationeventlog
  before_script:
    - 'cd src/BuildingBlocks/U.IntegrationEventLog'
    - chmod -R a+x ./dotnet-restore.sh
    - chmod -R a+x ./dotnet-build.sh
    - chmod -R a+x ./dotnet-publish.sh
    - chmod -R a+x ./dotnet-nuget-push.sh
  script:
    - ./dotnet-restore.sh
    - ./dotnet-build.sh
    - ./dotnet-publish.sh
    - ./dotnet-nuget-push.sh
  only:
    - master
    - develop

deploy_fetchservice:
  stage: docker_deploy
  image: docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - 'cd src/Jobs/U.FetchService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_generatorservice:
  stage: docker_deploy
  image: docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - 'cd src/Jobs/U.GeneratorService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_identityservice:
  stage: docker_deploy
  image: docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - 'cd src/Services/U.IdentityService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_notificationservice:
  stage: docker_deploy
  image: docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - 'cd src/Services/U.NotificationService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_productservice:
  stage: docker_deploy
  image: docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - 'cd src/Services/U.ProductService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_subscriptionservice:
  stage: docker_deploy
  image: docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - 'cd src/Services/U.SubscriptionService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_smartstoreadapter:
  stage: docker_deploy
  image: docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - 'cd src/Adapters/U.SmartStoreAdapter'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_apigateway:
  stage: docker_deploy
  image: docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - 'cd src/ApiGateway'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

include:
    - local: gitlab-ci/Dependency-Scanning.gitlab-ci.yml
    - local: gitlab-ci/License-Management.gitlab-ci.yml