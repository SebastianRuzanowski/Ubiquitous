image: mcr.microsoft.com/dotnet/core/sdk:3.1.300

stages:
  - build
  - tests_with_code_coverage
  - test
  - performance
  - myget_common
  - myget_common_netcore
  - myget_eventbus
  - myget_eventbus_rabbitmq
  - myget_integrationeventlog
  - deploy
  - docker_deploy



#dotnet_build:
#  stage: build
#  before_script:
#    - 'dotnet restore'
#  script:
#    - 'dotnet build'
#
#angular_build:
#  image: node:latest
#  stage: build
#  before_script:
#    - 'cd src/Web/U.WebApp.Angular'
#  script:
#    - npm install @angular/cli
#    - npm run ng -- build --prod

tests_with_code_coverage:
  stage: tests_with_code_coverage
  variables:
    U_PRODUCT_SERVICE_IT_TEST_CONNECTION: $K8S_SECRET_U_PRODUCT_SERVICE_IT_TEST_CONNECTION
    U_PRODUCT_SERVICE_AT_TEST_CONNECTION: $K8S_SECRET_U_PRODUCT_SERVICE_AT_TEST_CONNECTION
    PRODUCTSERVICE_AT_PATH: src/Services/U.ProductService/U.ProductService.ApplicationTests/bin/Debug/netcoreapp3.1/U.ProductService.ApplicationTests.dll
    PRODUCTSERVICE_IT_PATH: src/Services/U.ProductService/U.ProductService.IntegrationTests/bin/Debug/netcoreapp3.1/U.ProductService.IntegrationTests.dll
    PRODUCTSERVICE_DT_PATH: src/Services/U.ProductService/U.ProductService.DomainTests/bin/Debug/netcoreapp3.1/U.ProductService.DomainTests.dll
    IDENTITYSERVICE_DT_PATH: src/Services/U.IdentityService/U.IdentityService.DomainTests/bin/Debug/netcoreapp3.1/U.IdentityService.DomainTests.dll
    IDENTITYSERVICE_AT_PATH: src/Services/U.IdentityService/U.IdentityService.ApplicationTests/bin/Debug/netcoreapp3.1/U.IdentityService.ApplicationTests.dll
  before_script:
    - dotnet restore
  script:
    - dotnet build
    - dotnet vstest $PRODUCTSERVICE_AT_PATH $PRODUCTSERVICE_IT_PATH $PRODUCTSERVICE_DT_PATH $IDENTITYSERVICE_DT_PATH $IDENTITYSERVICE_AT_PATH /p:CollectCoverage=true

code_quality:
  stage: test
  when: manual
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay

  services:
    - docker:dind
  script:
    - docker pull codeclimate/codeclimate
    - docker run
      --env CODECLIMATE_DEBUG=1
      --env CODECLIMATE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      --volume /tmp/cc:/tmp/cc
      codeclimate/codeclimate analyze -f html > report.html
  artifacts:
    paths: [report.html]
  dependencies: []
  except:
    variables:
      - $CODE_QUALITY_DISABLED

MyGet_Common:
  stage: myget_common
  before_script:
    - 'cd src/BuildingBlocks/U.Common'
    - chmod -R a+x ./dotnet-restore.sh
    - chmod -R a+x ./dotnet-build.sh
    - chmod -R a+x ./dotnet-publish.sh
    - chmod -R a+x ./dotnet-nuget-push.sh
  script:
    - ./dotnet-restore.sh
    - ./dotnet-build.sh
    - ./dotnet-publish.sh
    - ./dotnet-nuget-push.sh
  only:
    - master
    - develop

MyGet_Common_NetCore:
  stage: myget_common_netcore
  before_script:
    - 'cd src/BuildingBlocks/U.Common.NetCore'
    - chmod -R a+x ./dotnet-restore.sh
    - chmod -R a+x ./dotnet-build.sh
    - chmod -R a+x ./dotnet-publish.sh
    - chmod -R a+x ./dotnet-nuget-push.sh
  script:
    - ./dotnet-restore.sh
    - ./dotnet-build.sh
    - ./dotnet-publish.sh
    - ./dotnet-nuget-push.sh
  only:
    - master
    - develop

MyGet_EventBus:
  stage: myget_eventbus
  before_script:
    - 'cd src/BuildingBlocks/U.EventBus'
    - chmod -R a+x ./dotnet-restore.sh
    - chmod -R a+x ./dotnet-build.sh
    - chmod -R a+x ./dotnet-publish.sh
    - chmod -R a+x ./dotnet-nuget-push.sh
  script:
    - ./dotnet-restore.sh
    - ./dotnet-build.sh
    - ./dotnet-publish.sh
    - ./dotnet-nuget-push.sh
  only:
    - master
    - develop

MyGet_EventBus_RabbitMQ:
  stage: myget_eventbus_rabbitmq
  before_script:
    - 'cd src/BuildingBlocks/U.EventBus.RabbitMQ'
    - chmod -R a+x ./dotnet-restore.sh
    - chmod -R a+x ./dotnet-build.sh
    - chmod -R a+x ./dotnet-publish.sh
    - chmod -R a+x ./dotnet-nuget-push.sh
  script:
    - ./dotnet-restore.sh
    - ./dotnet-build.sh
    - ./dotnet-publish.sh
    - ./dotnet-nuget-push.sh
  only:
    - master
    - develop

MyGet_IntegrationEventLog:
  stage: myget_integrationeventlog
  before_script:
    - 'cd src/BuildingBlocks/U.IntegrationEventLog'
    - chmod -R a+x ./dotnet-restore.sh
    - chmod -R a+x ./dotnet-build.sh
    - chmod -R a+x ./dotnet-publish.sh
    - chmod -R a+x ./dotnet-nuget-push.sh
  script:
    - ./dotnet-restore.sh
    - ./dotnet-build.sh
    - ./dotnet-publish.sh
    - ./dotnet-nuget-push.sh
  only:
    - master
    - develop

deploy_fetchservice:
  stage: docker_deploy
  image: docker:17.06.0-ce
  services:
    - docker:17.06.0-ce-dind
  before_script:
    - 'cd src/Jobs/U.FetchService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_generatorservice:
  stage: docker_deploy
  image: docker:17.06.0-ce
  services:
    - docker:17.06.0-ce-dind
  before_script:
    - 'cd src/Jobs/U.GeneratorService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_identityservice:
  stage: docker_deploy
  image: docker:17.06.0-ce
  services:
    - docker:17.06.0-ce-dind
  before_script:
    - 'cd src/Services/U.IdentityService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_notificationservice:
  stage: docker_deploy
  image: docker:17.06.0-ce
  services:
    - docker:17.06.0-ce-dind
  before_script:
    - 'cd src/Services/U.NotificationService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_productservice:
  stage: docker_deploy
  image: docker:17.06.0-ce
  services:
    - docker:17.06.0-ce-dind
  before_script:
    - 'cd src/Services/U.ProductService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_subscriptionservice:
  stage: docker_deploy
  image: docker:17.06.0-ce
  services:
    - docker:17.06.0-ce-dind
  before_script:
    - 'cd src/Services/U.SubscriptionService'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_smartstoreadapter:
  stage: docker_deploy
  image: docker:17.06.0-ce
  services:
    - docker:17.06.0-ce-dind
  before_script:
    - 'cd src/Adapters/U.SmartStoreAdapter'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

deploy_apigateway:
  stage: docker_deploy
  image: docker:17.06.0-ce
  services:
    - docker:17.06.0-ce-dind
  before_script:
    - 'cd src/ApiGateway'
    - chmod -R a+x ./docker-publish.sh
  script:
    - ./docker-publish.sh
  only:
    - master
    - develop

variables:
  DOCKER_DRIVER: overlay2

services:
  - docker:stable-dind

include:
    - local: gitlab-ci/Dependency-Scanning.gitlab-ci.yml
    - local: gitlab-ci/License-Management.gitlab-ci.yml
#    - local: gitlab-ci/Browser-Performance.gitlab-ci.yml //todo
#    - local: gitlab-ci/Container-Scanning.gitlab-ci.yml //todo
#    - local: gitlab-ci/SAST.gitlab-ci.yml //todo