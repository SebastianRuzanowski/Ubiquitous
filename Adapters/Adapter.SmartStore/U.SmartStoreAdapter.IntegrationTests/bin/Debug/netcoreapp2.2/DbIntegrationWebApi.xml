<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DbIntegrationWebApi</name>
    </assembly>
    <members>
        <member name="T:DbIntegrationWebApi.Controllers.CategoriesController">
            <summary>
            
            </summary>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.CategoriesController.#ctor(MediatR.IMediator)">
            <summary>
            Store Categories
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.CategoriesController.StoreCategory(DbIntegration.Application.Operations.Categories.Commands.StoreCategoryCommand)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.CategoriesController.GetCategories(DbIntegration.Application.Operations.Categories.Queries.GetCategoriesQuery)">
            <summary>
            Get Categories
            </summary>
            <returns></returns>
        </member>
        <member name="T:DbIntegrationWebApi.Controllers.ManufacturersController">
            <summary>
            
            </summary>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.ManufacturersController.#ctor(MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{DbIntegrationWebApi.Controllers.ManufacturersController})">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="logger"></param>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.ManufacturersController.Store(DbIntegration.Application.Operations.Manufacturers.Commands.StoreManufacturerCommand)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:DbIntegrationWebApi.Controllers.PicturesController">
            <summary>
            
            </summary>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.PicturesController.#ctor(MediatR.IMediator)">
            <summary>
            
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.PicturesController.StorePicture(DbIntegration.Application.Operations.Pictures.Commands.StorePicturesCommand)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:DbIntegrationWebApi.Controllers.ProductsController">
            <summary>
            
            </summary>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.ProductsController.#ctor(MediatR.IMediator)">
            <summary>
            
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.ProductsController.GetProductsList(DbIntegration.Application.Operations.Products.Queries.GetProducts.GetProductsListQuery)">
            <summary>
            Get list of products 
            </summary>
            <param name="productsListQuery"></param>
            <returns></returns>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.ProductsController.GetProduct(DbIntegration.Application.Operations.Products.Queries.GetProduct.GetProductQuery)">
            <summary>
            Get product by its id or systemName
            </summary>
            <param name="productQuery"></param>
            <returns></returns>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.ProductsController.StoreProducts(DbIntegration.Application.Operations.Products.Commands.StoreProductsCommand)">
            <summary>
            Add or update Product
            </summary>
            <param name="products"></param>
            <returns></returns>
        </member>
        <member name="T:DbIntegrationWebApi.Controllers.TaxCategoryController">
            <summary>
            Tax Category
            </summary>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.TaxCategoryController.#ctor(MediatR.IMediator)">
            <summary>
            
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:DbIntegrationWebApi.Controllers.TaxCategoryController.StoreTaxCategory(DbIntegration.Application.Operations.TaxCategory.Command.StoreTaxCategoryCommand)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:DbIntegrationWebApi.Extensions.ExceptionMiddleware">
            <summary>
            Exception Middleware that catches all exceptions
            </summary>
        </member>
        <member name="M:DbIntegrationWebApi.Extensions.ExceptionMiddleware.AddExceptionMiddleWare(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="logger"></param>
        </member>
        <member name="T:DbIntegrationWebApi.Extensions.HttpExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:DbIntegrationWebApi.Extensions.HttpExtensions.WriteJson``1(Microsoft.AspNetCore.Http.HttpResponse,``0,System.String)">
            <summary>
            
            </summary>
            <param name="response"></param>
            <param name="obj"></param>
            <param name="contentType"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:DbIntegrationWebApi.Extensions.MedatrExtensions">
            <summary>
            Extensions to scan for MediatR handlers and registers them.
            - Scans for any handler interface implementations and registers them as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient"/>
            - Scans for any <see cref="T:MediatR.Pipeline.IRequestPreProcessor`1"/> and <see cref="T:MediatR.Pipeline.IRequestPostProcessor`2"/> implementations and registers them as scoped instances
            Registers <see cref="T:MediatR.ServiceFactory"/> and <see cref="T:MediatR.IMediator"/> as scoped instances
            After calling AddMediatR you can use the container to resolve an <see cref="T:MediatR.IMediator"/> instance.
            This does not scan for any <see cref="T:MediatR.IPipelineBehavior`2"/> instances including <see cref="T:MediatR.Pipeline.RequestPreProcessorBehavior`2"/> and <see cref="T:MediatR.Pipeline.RequestPreProcessorBehavior`2"/>.
            To register behaviors, use the <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)"/> with the open generic or closed generic types.
            </summary>
        </member>
        <member name="M:DbIntegrationWebApi.Extensions.MedatrExtensions.AddMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers handlers and the mediator types from <see cref="P:System.AppDomain.CurrentDomain"/>.
            </summary>
            <param name="services">Service collection</param>
            <returns>Service collection</returns>
        </member>
        <member name="M:DbIntegrationWebApi.Extensions.MedatrExtensions.AddMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MediatR.MediatRServiceConfiguration})">
            <summary>
            Registers handlers and the mediator types from <see cref="P:System.AppDomain.CurrentDomain"/>.
            </summary>
            <param name="services">Service collection</param>
            <param name="configuration">The action used to configure the options</param>
            <returns>Service collection</returns>
        </member>
        <member name="M:DbIntegrationWebApi.Extensions.MedatrExtensions.AddMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            Registers handlers and mediator types from the specified assemblies
            </summary>
            <param name="services">Service collection</param>
            <param name="assemblies">Assemblies to scan</param>        
            <returns>Service collection</returns>
        </member>
        <member name="M:DbIntegrationWebApi.Extensions.MedatrExtensions.AddMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MediatR.MediatRServiceConfiguration},System.Reflection.Assembly[])">
            <summary>
            Registers handlers and mediator types from the specified assemblies
            </summary>
            <param name="services">Service collection</param>
            <param name="assemblies">Assemblies to scan</param>
            <param name="configuration">The action used to configure the options</param>
            <returns>Service collection</returns>
        </member>
        <member name="M:DbIntegrationWebApi.Extensions.MedatrExtensions.AddMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Action{MediatR.MediatRServiceConfiguration})">
            <summary>
            Registers handlers and mediator types from the specified assemblies
            </summary>
            <param name="services">Service collection</param>
            <param name="assemblies">Assemblies to scan</param>
            <param name="configuration">The action used to configure the options</param>
            <returns>Service collection</returns>
        </member>
        <member name="M:DbIntegrationWebApi.Extensions.MedatrExtensions.AddMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])">
            <summary>
            Registers handlers and mediator types from the assemblies that contain the specified types
            </summary>
            <param name="services"></param>
            <param name="handlerAssemblyMarkerTypes"></param>        
            <returns>Service collection</returns>
        </member>
        <member name="M:DbIntegrationWebApi.Extensions.MedatrExtensions.AddMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MediatR.MediatRServiceConfiguration},System.Type[])">
            <summary>
            Registers handlers and mediator types from the assemblies that contain the specified types
            </summary>
            <param name="services"></param>
            <param name="handlerAssemblyMarkerTypes"></param>
            <param name="configuration">The action used to configure the options</param>
            <returns>Service collection</returns>
        </member>
        <member name="M:DbIntegrationWebApi.Extensions.MedatrExtensions.AddMediatR(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Type},System.Action{MediatR.MediatRServiceConfiguration})">
            <summary>
            Registers handlers and mediator types from the assemblies that contain the specified types
            </summary>
            <param name="services"></param>
            <param name="handlerAssemblyMarkerTypes"></param>
            <param name="configuration">The action used to configure the options</param>
            <returns>Service collection</returns>
        </member>
        <member name="M:DbIntegrationWebApi.Extensions.MedatrExtensions.ConnectImplementationsToTypesClosing(System.Type,Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Helper method use to differentiate behavior between transaction handlers and notification handlers.
            Request handlers should only be added once (so set addIfAlreadyExists to false)
            Notification handlers should all be added (set addIfAlreadyExists to true)
            </summary>
            <param name="openRequestInterface"></param>
            <param name="services"></param>
            <param name="assembliesToScan"></param>
            <param name="addIfAlreadyExists"></param>
        </member>
        <member name="M:DbIntegrationWebApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            This method gets called by the runtime. Use this method to add services to the container.
        </member>
        <member name="M:DbIntegrationWebApi.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            This method gets called by the runtime. Use this method to configure the HTTP transaction pipeline.
        </member>
    </members>
</doc>
