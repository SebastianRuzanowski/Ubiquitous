// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartStore.Persistance.Context;

namespace SmartStore.Persistance.Migrations
{
    [DbContext(typeof(SmartStoreContext))]
    partial class SmartStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Catalog.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias")
                        .HasMaxLength(100);

                    b.Property<bool?>("AllowCustomersToSelectPageSize");

                    b.Property<int>("BadgeStyle");

                    b.Property<string>("BadgeText");

                    b.Property<string>("BottomDescription")
                        .HasMaxLength(400);

                    b.Property<int>("CategoryTemplateId");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("DefaultViewMode");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("FullName")
                        .HasMaxLength(400);

                    b.Property<bool>("HasDiscountsApplied");

                    b.Property<bool>("LimitedToStores");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400);

                    b.Property<string>("Name")
                        .HasMaxLength(400);

                    b.Property<int?>("PageSize");

                    b.Property<string>("PageSizeOptions")
                        .HasMaxLength(200);

                    b.Property<int>("ParentCategoryId");

                    b.Property<int?>("PictureId");

                    b.Property<string>("PriceRanges")
                        .HasMaxLength(400);

                    b.Property<bool>("Published");

                    b.Property<bool>("ShowOnHomePage");

                    b.Property<bool>("SubjectToAcl");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Catalog.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AllowCustomersToSelectPageSize");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("HasDiscountsApplied");

                    b.Property<bool>("LimitedToStores");

                    b.Property<int>("ManufacturerTemplateId");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int?>("PageSize");

                    b.Property<string>("PageSizeOptions")
                        .HasMaxLength(200);

                    b.Property<int?>("PictureId");

                    b.Property<string>("PriceRanges")
                        .HasMaxLength(400);

                    b.Property<bool>("Published");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AdditionalShippingCharge");

                    b.Property<string>("AdminComment");

                    b.Property<bool>("AllowCustomerReviews");

                    b.Property<string>("AllowedQuantities")
                        .HasMaxLength(1000);

                    b.Property<int>("ApprovedRatingSum");

                    b.Property<int>("ApprovedTotalReviews");

                    b.Property<DateTime?>("AvailableEndDateTimeUtc");

                    b.Property<bool>("AvailableForPreOrder");

                    b.Property<DateTime?>("AvailableStartDateTimeUtc");

                    b.Property<decimal?>("BasePriceAmount");

                    b.Property<int?>("BasePriceBaseAmount");

                    b.Property<bool>("BasePriceEnabled");

                    b.Property<string>("BasePriceMeasureUnit");

                    b.Property<bool>("CallForPrice");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("CustomerEntersPrice");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("DisableBuyButton");

                    b.Property<bool>("DisableWishlistButton");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("DisplayStockAvailability");

                    b.Property<bool>("DisplayStockQuantity");

                    b.Property<string>("FullDescription");

                    b.Property<string>("Gtin");

                    b.Property<bool>("HasDiscountsApplied");

                    b.Property<bool>("HasPreviewPicture");

                    b.Property<bool>("HasTierPrices");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("HomePageDisplayOrder");

                    b.Property<bool>("IsEsd");

                    b.Property<bool>("IsFreeShipping");

                    b.Property<bool>("IsShipEnabled");

                    b.Property<bool>("IsTaxExempt");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("LimitedToStores");

                    b.Property<int>("LowStockActivityId");

                    b.Property<int?>("MainPictureId");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(400);

                    b.Property<decimal>("MaximumCustomerEnteredPrice");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400);

                    b.Property<int>("MinStockQuantity");

                    b.Property<decimal>("MinimumCustomerEnteredPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .HasMaxLength(400);

                    b.Property<int>("NotApprovedRatingSum");

                    b.Property<int>("NotApprovedTotalReviews");

                    b.Property<int>("NotifyAdminForQuantityBelow");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("OrderMaximumQuantity");

                    b.Property<int>("OrderMinimumQuantity");

                    b.Property<int>("ParentGroupedProductId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ProductCost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductTypeId");

                    b.Property<bool>("Published");

                    b.Property<int>("QuantityStep");

                    b.Property<string>("ShortDescription");

                    b.Property<bool>("ShowOnHomePage");

                    b.Property<string>("Sku")
                        .HasMaxLength(400);

                    b.Property<decimal?>("SpecialPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("SpecialPriceEndDateTimeUtc");

                    b.Property<DateTime?>("SpecialPriceStartDateTimeUtc");

                    b.Property<int>("StockQuantity");

                    b.Property<bool>("SubjectToAcl");

                    b.Property<string>("SystemName")
                        .HasMaxLength(400);

                    b.Property<int>("TaxCategoryId");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<bool>("VisibleIndividually");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Catalog.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsFeaturedProduct");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Category_Mapping");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Catalog.ProductManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsFeaturedProduct");

                    b.Property<int>("ManufacturerId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Manufacturer_Mapping");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Catalog.ProductPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("PictureId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Picture_Mapping");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Media.MediaStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasMaxLength(2147483647);

                    b.HasKey("Id");

                    b.ToTable("MediaStorage");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Media.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Height");

                    b.Property<bool>("IsNew");

                    b.Property<bool>("IsTransient");

                    b.Property<int?>("MediaStorageId");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<byte[]>("PictureBinary");

                    b.Property<string>("SeoFilename");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<int?>("Width");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Seo.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("StoreId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Seo.UrlRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("IsActive");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("UrlRecord");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Tax.TaxCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("TaxCategory");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Catalog.Category", b =>
                {
                    b.HasOne("U.SmartStoreAdapter.Domain.Entities.Media.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Catalog.Manufacturer", b =>
                {
                    b.HasOne("U.SmartStoreAdapter.Domain.Entities.Media.Picture", "Picture")
                        .WithMany("Manufacturers")
                        .HasForeignKey("PictureId");
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Catalog.ProductCategory", b =>
                {
                    b.HasOne("U.SmartStoreAdapter.Domain.Entities.Catalog.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("U.SmartStoreAdapter.Domain.Entities.Catalog.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Catalog.ProductManufacturer", b =>
                {
                    b.HasOne("U.SmartStoreAdapter.Domain.Entities.Catalog.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("U.SmartStoreAdapter.Domain.Entities.Catalog.Product", "Product")
                        .WithMany("ProductManufacturers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("U.SmartStoreAdapter.Domain.Entities.Catalog.ProductPicture", b =>
                {
                    b.HasOne("U.SmartStoreAdapter.Domain.Entities.Media.Picture", "Picture")
                        .WithMany("ProductPictures")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("U.SmartStoreAdapter.Domain.Entities.Catalog.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
