// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using U.ProductService.Persistance.Contexts;

namespace U.ProductService.Persistance.Migrations.Product
{
    [DbContext(typeof(ProductContext))]
    partial class ProductContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("U.ProductService.Domain.Aggregates.Category.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsDraft");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("ParentCategoryId");

                    b.HasKey("Id");

                    b.ToTable("Categories","Products");
                });

            modelBuilder.Entity("U.ProductService.Domain.Aggregates.Manufacturer.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UniqueClientId");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers","Products");
                });

            modelBuilder.Entity("U.ProductService.Domain.Aggregates.Picture.MimeType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Pictures_MimeTypes","Products");
                });

            modelBuilder.Entity("U.ProductService.Domain.Aggregates.Product.ProductType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Products_Types","Products");
                });

            modelBuilder.Entity("U.ProductService.Domain.Picture", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AggregateRootId");

                    b.Property<string>("AggregateRootName");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<Guid>("FileStorageUploadId");

                    b.Property<Guid?>("ManufacturerId");

                    b.Property<int?>("MimeTypeId");

                    b.Property<Guid?>("ProductId");

                    b.Property<string>("Uri")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MimeTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Pictures","Products");
                });

            modelBuilder.Entity("U.ProductService.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarCode");

                    b.Property<Guid>("CategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<Guid>("ManufacturerId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BarCode")
                        .IsUnique();

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products","Products");
                });

            modelBuilder.Entity("U.ProductService.Domain.Picture", b =>
                {
                    b.HasOne("U.ProductService.Domain.Aggregates.Manufacturer.Manufacturer")
                        .WithMany("Pictures")
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("U.ProductService.Domain.Aggregates.Picture.MimeType", "MimeType")
                        .WithMany()
                        .HasForeignKey("MimeTypeId");

                    b.HasOne("U.ProductService.Domain.Product")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("U.ProductService.Domain.Product", b =>
                {
                    b.HasOne("U.ProductService.Domain.Aggregates.Category.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("U.ProductService.Domain.Aggregates.Product.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("U.ProductService.Domain.Dimensions", "Dimensions", b1 =>
                        {
                            b1.Property<Guid>("ProductId");

                            b1.Property<decimal>("Height");

                            b1.Property<decimal>("Length");

                            b1.Property<decimal>("Weight");

                            b1.Property<decimal>("Width");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products","Products");

                            b1.HasOne("U.ProductService.Domain.Product")
                                .WithOne("Dimensions")
                                .HasForeignKey("U.ProductService.Domain.Dimensions", "ProductId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
